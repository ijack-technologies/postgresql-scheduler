# syntax=docker/dockerfile:1.6
FROM nikolaik/python-nodejs:python3.11-nodejs22-slim

# Use Docker BuildKit for better caching and faster builds
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_INLINE_CACHE=1
ARG COMPOSE_DOCKER_CLI_BUILD=1

# Set Python environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # UV configuration
    UV_CACHE_DIR=/root/.cache/uv \
    UV_SYSTEM_PYTHON=1 \
    # Environment
    HOST=0.0.0.0

# Add binaries to PATH (including Claude Code installed via official script)
ENV PATH="/root/.local/bin:/root/.bun/bin:/root/.bun/install/global/node_modules/.bin:/workspace/node_modules/.bin:/workspace/.venv/bin:$PATH"

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Basic utilities
    curl \
    wget \
    unzip \
    git \
    nano \
    dos2unix \
    jq \
    # Development tools
    gcc \
    cron \
    procps \
    # Database libraries (for psycopg2-binary)
    libpq-dev \
    # Build dependencies
    libwebp-dev \
    # Network utilities
    iputils-ping \
    # Required for CLIs
    lsb-release \
    gnupg \
    apt-transport-https \
    ca-certificates \
    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install GitHub CLI
RUN mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
    | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
    | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt-get update \
    && apt-get install -y --no-install-recommends gh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf awscliv2.zip aws/

# Install Docker CLI (for connecting to host Docker)
RUN mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
    | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        docker-ce-cli \
        docker-compose-plugin \
        docker-buildx-plugin \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    # Create docker group and add root user
    && groupadd -f docker \
    && usermod -aG docker root \
    # Create docker CLI plugins directory
    && mkdir -p /root/.docker/cli-plugins

# Install UV (Python package manager)
RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && curl -LsSf https://astral.sh/uv/install.sh | sh

# Install Bun (JavaScript runtime and package manager)
RUN curl -fsSL https://bun.sh/install | bash

# Install Claude Code using the official install script (always latest version)
RUN curl -fsSL https://claude.ai/install.sh | bash

# Set working directory
WORKDIR /workspace

# Create logs directory (maintaining compatibility with existing structure)
RUN mkdir -p /workspace/logs /project/logs

# Copy JavaScript dependency files if they exist (for caching)
COPY package.json* bun.lockb* ./
RUN --mount=type=cache,target=/root/.bun/install/cache,id=bun_cache \
    if [ -f package.json ]; then \
        /root/.bun/bin/bun install; \
    fi

# Copy Python dependency files if they exist
COPY pyproject.toml* uv.lock* requirements*.txt* ./
RUN --mount=type=cache,target=/root/.cache/uv,id=uv_cache \
    if [ -f pyproject.toml ]; then \
        uv venv /workspace/.venv; \
        . /workspace/.venv/bin/activate; \
        uv pip install -e .[dev] || echo "UV install from pyproject.toml skipped"; \
    elif [ -f requirements.txt ]; then \
        uv venv /workspace/.venv; \
        . /workspace/.venv/bin/activate; \
        uv pip install -r requirements.txt || echo "UV install from requirements.txt skipped"; \
    fi

# Configure shell environment
RUN echo 'export PATH="/root/.bun/install/global/node_modules/.bin:/workspace/node_modules/.bin:/workspace/.venv/bin:$PATH"' >> /etc/profile \
    && echo 'export PATH="/root/.bun/install/global/node_modules/.bin:/workspace/node_modules/.bin:/workspace/.venv/bin:$PATH"' >> /root/.bashrc \
    && echo 'alias python="/workspace/.venv/bin/python"' >> /root/.bashrc \
    && echo 'alias pip="/workspace/.venv/bin/pip"' >> /root/.bashrc

# Copy custom .bashrc if it exists
COPY .bashrc* /root/

# Set Docker to use the mounted socket
ENV DOCKER_HOST=unix:///var/run/docker.sock

# Set PYTHONPATH for the workspace
ENV PYTHONPATH=/workspace

# Copy the entrypoint script to install the Python and Node dependencies if the .venv or node_modules directories don't exist
COPY entrypoint.dev.sh /entrypoint.dev.sh
RUN chmod +x /entrypoint.dev.sh
ENTRYPOINT ["/entrypoint.dev.sh"]