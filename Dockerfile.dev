FROM nikolaik/python-nodejs:python3.11-nodejs22-slim

# Use Docker BuildKit for better caching and faster builds
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_INLINE_CACHE=1
# Enable BuildKit for Docker-Compose
ARG COMPOSE_DOCKER_CLI_BUILD=1

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install cron for scheduled jobs and procps for "ps" tool to check running procs
RUN apt-get update && \
    apt-get -y --no-install-recommends install curl git cron nano procps wget dos2unix jq && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

# Install GitHub CLI (gh)
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
    | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
    | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update && \
    apt-get install -y gh

# Install Node.js dependencies
RUN npm install --global pnpm
# Add node_modules/.bin to PATH for both build-time and runtime
ENV PATH="/workspace/node_modules/.bin:$PATH"
RUN echo 'export PATH="/workspace/node_modules/.bin:$PATH"' >> /etc/profile && \
    echo 'export PATH="/workspace/node_modules/.bin:$PATH"' >> /root/.bashrc
RUN corepack enable pnpm
# Copy installation files for pnpm
COPY package.json pnpm-lock.yaml ./
RUN --mount=type=cache,target=/root/.pnpm-store,id=my_pnpm \
    pnpm install

# Install Docker and Docker Compose so we can access Windows 11 Docker Desktop
RUN \
    apt update && \
    apt-get install ca-certificates curl && \
    install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc && \
    # Add the repository to Apt sources:
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin && \
    # Add root user to docker group for socket access
    groupadd -f docker && usermod -aG docker root && \
    # Create docker-cli-plugin directory
    mkdir -p /root/.docker/cli-plugins

# Ensure Docker uses the mounted socket
ENV DOCKER_HOST=unix:///var/run/docker.sock

WORKDIR /workspace

# Install Poetry with the root user
# Ensure pip is the latest version
ENV POETRY_HOME=/usr/local
RUN pip install --upgrade pip && \
    # Install Poetry
    curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python && \
    cd /usr/local/bin && \
    ln -sf /opt/poetry/bin/poetry && \
    poetry config virtualenvs.create false && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* && \
    # Make the logs folder
    mkdir -p /project/logs

# Switch back to dialog for any ad-hoc use of apt-get
ENV DEBIAN_FRONTEND=

# Copy my preferred .bashrc to /root/ so that it's automatically "sourced" when the container starts
COPY .bashrc /root/

# Copy the entrypoint script to install the Python and Node dependencies if the .venv or node_modules directories don't exist
COPY entrypoint.dev.sh /entrypoint.dev.sh
RUN chmod +x /entrypoint.dev.sh
ENTRYPOINT ["/entrypoint.dev.sh"]
